#!/usr/bin/env python3
from __future__ import annotations

import argparse
import gzip
import json
import os.path
import tarfile
import tempfile

from pre_commit import constants
from pre_commit.all_languages import languages
from pre_commit.store import _make_local_repo


def reset(tarinfo: tarfile.TarInfo) -> tarfile.TarInfo:
    tarinfo.uid = tarinfo.gid = 0
    tarinfo.uname = tarinfo.gname = 'root'
    tarinfo.mtime = 0
    return tarinfo


def main() -> int:
    parser = argparse.ArgumentParser()
    parser.add_argument('--dest', required=True)

    args = parser.parse_args()

    os.makedirs(args.dest, exist_ok=True)

    data = {
        'languages': {
            k: {
                'default_version': v.get_default_version(),
                'env_dir': v.ENVIRONMENT_DIR,
            }
            for k, v in languages.items()
        },
        'local_repo_version': constants.LOCAL_REPO_VERSION,
    }

    info_json = os.path.join(args.dest, 'info.json')
    with open(info_json, 'w') as f:
        json.dump(data, f)

    with tempfile.TemporaryDirectory() as tmpdir:
        _make_local_repo(tmpdir)

        arcs = []
        for root, dirs, filenames in os.walk(tmpdir):
            for filename in dirs + filenames:
                abspath = os.path.abspath(os.path.join(root, filename))
                arcs.append((os.path.relpath(abspath, tmpdir), abspath))
        arcs.sort()

        local_tgz = os.path.join(args.dest, 'local.tgz')
        with gzip.GzipFile(local_tgz, 'wb', mtime=0) as gzipf:
            with tarfile.open(fileobj=gzipf, mode='w') as tf:
                for arcname, abspath in arcs:
                    tf.add(
                        abspath,
                        arcname=arcname,
                        recursive=False,
                        filter=reset,
                    )

    return 0


if __name__ == '__main__':
    raise SystemExit(main())
